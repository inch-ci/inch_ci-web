en:
  datetime:
    distance_in_words:
      less_than_x_minutes:
        one: '< 1 minute'
        other: 'less than {{count}} minutes ago'
  navigation:
    brand: "# Inch CI"
    home: Home
    learn_more: Learn more
    what_is_this: What is this about?
    help: Help
    signin: "Sign in with GitHub"
    signout: "Sign out"

  badge:
    image_format:
      png: PNG
      svg: SVG
    image_style:
      default: Default
      flat: Flat
      flat-square: "Square style"
      shields: "shields.io style"
    markup_format:
      image_url: "Image URL:"
      md: "Markdown:"
      textile: "Textile:"
      rdoc: "RDoc:"
    choose_hint: "<b>Styles:</b> Choose the one fitting your lifestyle!"
    pro_hint: "<b>Pro-Tip:</b> "
  grade_list_table:
    header_A: "Seems really good"
    header_B: "Proper documentation present"
    header_C: "Please take a look"
    header_U: "Undocumented"
    grade_icon_hint: "Grade"
    location_in_name: "in %{filename}"
    priority_icon_hint: "Priority"
    show_more: "Show %{more_count} more ..."
  shared:
    back_link: Back
    twitter_text: "Docs badges for %{project_language} projects:"
    twitter_text_wo_project: "Docs badges for Ruby projects:"
    code_object_roles:
      # legacy roles:
      object:
        without_doc: "Add a comment describing the %{object_type}."
        without_code_example: "Add a code example (optional)."
        without_return_type: "You could add the object\'s return type."
        without_return_description: "You could describe the return value."
      method_parameter:
        without_mention: "Describe the parameter \"%{ref_name}\"."
        without_type: ""
      method:
        without_return_type: ""
        without_return_description: "Describe what \"%{ref_name}\" returns."
      constant:
        without_doc: ""
        without_code_example: ""
      # modern roles:
      ruby:
        object:
          without_doc: "Add a comment describing the %{object_type}."
          without_code_example: "Add a code example (optional)."
          without_return_type: "You could add the object\'s return type."
          without_return_description: "You could describe the return value."
        method_parameter:
          without_mention: "Describe the parameter \"%{ref_name}\"."
          without_type: ""
        method:
          without_return_type: ""
          without_return_description: "Describe what \"%{ref_name}\" returns."
        constant:
          without_doc: ""
          without_code_example: ""
      elixir:
        object:
          without_doc: "Add a comment describing the %{object_type}."
          without_code_example: "Add a code example (optional)."
          without_return_type: "You could add the object\'s return type."
          without_return_description: "You could describe the return value."
        function_parameter:
          without_mention: "Describe the parameter \"%{ref_name}\"."
          without_type: ""
        function:
          without_return_type: ""
          without_return_description: "Describe what \"%{ref_name}\" returns."
        constant:
          without_doc: ""
          without_code_example: ""
      java_script:
        object:
          without_doc: "Add a comment describing the %{object_type}."
          without_code_example: "Add a code example (optional)."
          without_return_type: "You could add the object\'s return type."
          without_return_description: "You could describe the return value."
        function_parameter:
          without_mention: "Describe the parameter \"%{ref_name}\"."
          without_type: ""
        function:
          without_return_type: ""
          without_return_description: "Describe what \"%{ref_name}\" returns."
        constant:
          without_doc: ""
          without_code_example: ""
    title: "Inch CI - Documentation badges for Ruby, JS & Elixir projects - Show off your docs"
    footer: |
      Inch CI evaluates your project's inline code documentation and reports grades for each class, module and method.

      It is an [open source project](https://github.com/inch-ci/inch_ci-web),
      created by René Föhring ([@rrrene](https://twitter.com/rrrene)),
      based on [Inch](http://trivelop.de/inch).

      Please [create an issue](https://github.com/inch-ci/inch_ci-web/issues/new) if anything seems broken or worthy of improvement.

  welcome:
    headline: "Documentation badges for Ruby, JS & Elixir"
    abstract: |
      Thanks to [Travis](http://travis-ci.org), the community champions testing.

      Thanks to [Code Climate](http://codeclimate.com), we refactor constantly.

      But there is no way to lint and show off your inline docs. Until now.
    signin_hint: "You can also add your projects via GitHub:"
    abstract2: |
      Let's raise the visibility of code documentation in Ruby, JS & Elixir!

      Because better inline docs mean easier contribution and more collaboration!
    featured_elixir_projects: "Now with Elixir support:"
    featured_ruby_projects: "Join hundreds of Ruby projects!"
    featured_javascript_projects: "NEW: Let's do JavaScript on Inch CI!"
    learn_more: "Learn more"
    project_placeholder: rrrene/inch
    project_hint: "Simply type your GitHub username/reponame"
    add_project: "Evaluate"
  about:
    headline: "What this is about ..."
    abstract: |
      ## What is Inch CI?

      This project is an attempt to raise the visibility of documentation in Open Source. It provides badges to include in your project's README, to show people that documenting code is a cool thing.

      The badges are based on Inch and look like this:
      ![Inline docs](%{badge_image_url})
       Get yours below!

      ## What is this "Inch"?

      Inch is a documentation measurement tool for Ruby that was created to help people document their code.
      It is a command-line utility that gives grades based on how complete the docs are ([screenshots](http://trivelop.de/inch)).

      ## What is the goal?

      I really think that posting these badges in a project's README will benefit the project (because people can see that it's well documented) and the community by improving the visibility of documentation.

      Let's start a discussion, let's raise the visibility of documentation, let's talk.

      ## Wait, who's behind this?

      I'm [@rrrene](https://twitter.com/rrrene), creator of [sparkr](http://trivelop.de/sparkr) and [Inch](http://trivelop.de/inch).

      If you have any questions or suggestions: Hit me up [on Twitter](https://twitter.com/rrrene) or [create an issue](https://github.com/inch-ci/inch_ci-web) in the Inch CI project.
  help:
    header:
      headline: Documentation
    index:
      headline: "Getting started"
      abstract: |
        Inch CI is a hosted continuous integration service that evaluates inline code documentation for a variety of programming languages and is integrated with GitHub.

        Supported languages at this point are:

        * Ruby
        * JavaScript
        * Elixir

        After evaluating your codebase, Inch CI [reports grades](/help/grades) for each class, module, method, function etc.

        ## Step One: Add your project

        Go to the [homepage](/) and enter your GitHub `username/repo` info to evaluate any Open Source project that uses any of the languages listed above.

        ## Step Two: Add a badge

        Inch CI [provides badges](/help/badge), which can be added to project's READMEs to motivate aspiring developers to read the source code (because they can expect a certain amount of docs to be there).

        The badges do not show numbers like "65,7% documented", but give a visual feedback on how much documentation there is in the code.
        [![Inline docs](%{badge_image_url})](/help/badge)

        ## Step Three: Hook your projects

        [Sign in via GitHub](/auth/github) to add all your projects and activate hooks for automatic evaluation.
    badge:
      headline: Using Badges
      body1: |

        ### Putting badges in READMEs

        Like many services, Inch CI provides badges to be embedded in READMEs. That way, visitors and potential contributors of your GitHub projects can immediately see that you value documenting your code.

        Here is an example from one of my projects: [![Inline docs](http://inch-ci.org/github/rrrene/sparkr.svg?branch=master)](http://inch-ci.org/github/rrrene/sparkr)

        Hopefully it's mostly green when you're reading this.

        ### Understanding the "progress-bar"

        Inch evaluates inline-docs and [reports grades](/help/grades) for each class, module and method.
        The badges display up to four segments, with each segment representing one of these grades:
      body2: |
        * `A` Seems perfect, Inch can't make any suggestions for improvement.
        * `B` Properly documented. Inch is able to make (pedantic) suggestions for minor improvements.
        * `C` Something seems off here, like a mispelled parameter name. Please take a look.
        * `U` Undocumented. This is assigned a special grade, since almost every project has parts that are not in need of explicit documentation.

        The widths of the individual segments represent the distribution of the grades.

        In the above example, you can see a grade distribution that tells you four things:

        * There is a significant amount of documented code.
        * The present documentation seems really good.
        * There are some items that should be checked on.
        * There are still some undocumented methods, which should not be a big deal.

        This provides a lot more insight than an overall grade could and does a much better job of painting the bigger picture.

    grades:
      headline: The Grade System
      body: |
        Inch evaluates inline-docs and reports grades for each class, module and method.

        ### Philosophy

        Inch was ***created to help people document their code***, therefore it may be more important to look at what it does *not* do than at what it does.

        * It does not aim for "fully documented" or "100% documentation coverage".
        * It does not tell you to document everything (neither does it tell you not to).
        * It does not impose rules on how your documentation should look like.
        * It does not require that, e.g."every function's documentation should be a single line under 80 characters not ending in a period" or that "every class and module should provide a code example of their usage".

        Inch ***takes a more relaxed approach*** towards documentation measurement and tries to show you places where your codebase *could* use more documentation.

        ### The Grade System

        Inch ***assigns grades to each class, module, constant or function*** in a codebase, based on how complete the docs are.

        The grades are:

        * `A` - Seems really good
        * `B` - Properly documented, but could be improved
        * `C` - Needs work
        * `U` - Undocumented

        Using this system has some advantages compared to plain coverage scores:

        * You can get an `A` even if you "only" get 90 out of 100 possible points.
        * Getting a `B` is basically good enough.
        * ***Undocumented objects are assigned a special grade***, instead of scoring 0%.

        The last point might be the most important one: If objects are undocumented, there is nothing to evaluate. Therefore you can not simply give them a bad rating, ***because they might be left undocumented intentionally***.

        Inch ***does not give you a grade for your whole codebase***. The grade distribution ***does a much better job of painting the bigger picture***.

        ### Priorities  ↑ ↓

        Every class, module and function in a codebase is assigned a priority which reflects how important Inch thinks it is to be documented.

        This process follows some reasonable rules, like

        * it is more important to document public functions than private ones
        * it is more important to document functions with many parameters than functions without parameters
        * it is not important to document objects marked as private

        Priorities are displayed as arrows. Arrows pointing north mark high priority objects, arrows pointing south mark low priority objects.

  help_configuration_yaml:
    headline: "Using .inch.yml to include/exclude stuff"
    body1: |
      By default, Inch looks into `{app,lib}/**/*.rb` for Ruby source files.

      You can configure which files and objects Inch considers by creating a file named `.inch.yml` in your project directory:
    body2: |
      As you would expect, `included` sets an array of included files (or globs). This way you can point Inch to where your sources are, if they are not in `app/` or `lib/`.

      `excluded` sets an array of files (or globs) to exclude files from the evaluation.

  help_configuration_json:
    headline: "Using inch.json to include/exclude stuff"
    body1: |
      By default, Inch looks into `lib/` and `src/` for JavaScript source files.

      You can configure which files and objects Inch considers by creating a file named `inch.json` in your project directory:
    body2: |
      As you would expect, `included` sets an array of included files (or globs). This way you can point Inch to where your sources are, if they are not in `lib/` or `src/`.

      `excluded` sets an array of files (or globs) to exclude files from the evaluation.

  help_webhook:
    headline: Webhooks - Continuous Evaluation
    abstract: |
      ### Configure webhooks via your profile page

      You can [sign in](/auth/github) with your GitHub account and configure which projects are build automatically each time you push your code to GitHub.

      ### How to manually configure a webhook

      Do not want to sign in? No problem! You can configure your hook manually via the GitHub settings of each project.
    howto1: "Go to the *Settings* page of your repository:"
    howto2: "Select the *Webhooks and Services* submenu:"
    howto3: "Click the *Add webhook* button ..."
    howto4: "... and use http://inch-ci.org/rebuild as Payload URL:"
    howto5: "Click *Add webhook* and you are good to go!"

  builds:
    status:
      deffered: "prepare"
    index:
      title: Recent builds
      title_with_project: "Recent builds for %{project_name}"
      running_header: "Running <small>(%{count})</small>"
      scheduled_header: "Scheduled <small>(%{count})</small>"
      completed_header: Completed
      finished_ago: "%{time_ago} ago"
  code_objects:
    show:
      docstring_header: "Parsed documentation:"
      suggestions_header: "Suggestions:"
      no_suggestions_header: "No suggestions."
      view_on_github: "View on GitHub"
      issue_hint:
        text: "Please help! %{link} if this assessment is incorrect."
        link: "Open an issue on GitHub"
  users:
    show:
      title: "%{name} (@%{user_name})"
      empty_hint: "Your projects have not yet been synced."
      sync_hint: "Your GitHub info has last been synced: %{time_ago} ago."
      only_public_hint: "<p>Showing only <strong>your</strong> public projects.</p><p>Add an organization's project by typing its <code>username/repo</code>:</p>"
      sync_now: "Sync now!"
      hook_create: "Add webhook"
      hook_create_hint: "Inch CI will update the badge whenever you push code to GitHub."
      hook_remove: "Webhook: enabled"
      evaluate_now: "Evaluate"
      add_project:
        header: "Add forked/organization projects"
        intro: "You can add any project by typing it's full name below:"
        placeholder: "username/repo"
        submit: "Evaluate"
      languages:
        Ruby:
          header: "Ruby projects"
          intro: "Inch was originally designed to evaluate the inline-docs of Ruby projects"
        Elixir:
          header: "Elixir projects"
          intro: "Inch CI can now also evaluate Elixir projects, but they have to be build by Travis"
          how_to_build: "How to configure Travis to build this project"
        JavaScript:
          header: "JavaScript projects"
          intro: "The next language to be supported by Inch CI"
          how_to_build: "How to join the JavaScript beta"
        other:
          header: "Other projects"
          intro: "Here you see all your other none-forked projects"


  projects:
    create:
      url_not_found: "No project was found under that URL."
    form_edit:
      label:
        language: "Language:"
        documentation_url: "Documentation URL:"
      submit: "Save changes"
    topbar:
      info:
        build_number: "Build"
        builds_all: "(%{link})"
        builds_link: "all"
        build_status: "Status"
        running_time: "Started"
        duration: "Duration"
        finished_ago: "Date"
        status: "Status"
        branch_name: Branch
        revision_uid: Revision
        language: Language
        language_unknown: unknown
        edit_all: "(%{link})"
        edit_link: "change"
        edit_submit: "Change"
        edit_signin_hint: "Only the owner of this project can change the evaluation language. Please sign in via GitHub."
        message: Message
        author_name: Author
        documentation_url: Documentation
        source_code_url: Source
      profile_link: "← Back to my projects"
      rebuild_link: Refresh
      rebuild_link_tooltip: "Re-evaluate this project's docs"
      rebuild_on_travis_link: Build via Travis
      rebuild_on_travis_link_tooltip: "Learn how-to re-evaluate this project's docs"
      feedback_link: Feedback
      feedback_link_tooltip: "Post questions, suggestions, and bugs"
      tweet_link: Tweet
      tweet_link_tooltip: Spread the word!
      update_info_link: "Update branches & info"
    wait_for_build:
      info: "Your page is currently building. This page will refresh automatically (can take up to a minute)."
    start_build:
      info: "This is not evaluated yet. Press 'Refresh' to evaluate now!"
      javascript_sources_not_found:  |
        It seems that Inch can't find the sources on this project.

        ### Can I tell Inch which files to evaluate?

        No problemo! [Learn how ...](/help/config_file_json)
    subnavi:
      history: Build History
      show: Evaluation
      suggestions: Suggestions <span class=badge>%{suggestion_count}</span>
    page:
      about1: |
        ## Let's raise the visibility of documentation in Open Source!

        This page is for <code>%{project_nwo}</code> and is part of a project called "Inch CI", showing documentation measurements provided by [Inch](http://trivelop.de/inch).
        <span style="white-space: nowrap;">Inch CI</span> also provides a badge: <img src="%{badge_image_url}">
        <small>(<a href="https://github.com/rrrene/inch-pages/commit/51555d50d21e234fa240fc9920cf7c27310ff542">not counting</a> low priority objects)</small>

      about2: |
        ### Can I have my own badges?

        [Sure!](/)

      about_help: |
        ### Can I tell Inch which files to evaluate?

        No problemo! [Learn how ...](%{config_path})

        ### Can I configure a webhook for continuous integration?

        Of course! [Learn how ...](/help/webhook)
      about4: |
        ### What is the goal of this?

        I really think that posting badges for documentation in READMEs will benefit you (because ***people can see that your project is well documented***) and our community in general by improving the visibility of documentation.


        Let's start a discussion, let's raise the visibility of documentation, let's talk.

        ***Suggestions, feedback, critique***: <a target="_blank" href="https://twitter.com/rrrene">Hit me up on Twitter</a> or <a target="_blank" href="https://github.com/inch-ci/inch_ci-web/issues/new">via issue</a>.
